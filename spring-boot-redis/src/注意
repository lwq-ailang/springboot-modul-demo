

参考：http://emacoo.cn/backend/spring-redis/

 * Spring Redis默认使用JDK进行序列化和反序列化，因此被缓存对象需要实现java.io.Serializable接口，否则缓存出错。
 * 当被缓存对象发生改变时，可以选择更新缓存或者失效缓存，但一般而言，后者优于前者，因为执行速度更快。
 * Watchout! 在同一个Class内部调用带有缓存注解的方法，缓存并不会生效。


场景1：数据缓存
    第一个应用场景是数据缓存，最典型的当属缓存数据库查询结果。
    对于高频读低频写的数据，使用缓存可以第一，加速读取过程，第二，降低数据库压力。

场景2：共享Session
    共享Session是第二个典型应用场景，这是利用了Redis的堆外内存特性。
    要保证分布式应用的可伸缩性，带状态的Session对象是绕不过去的一道坎。
    一种方式是将Session持久化到数据库中，缺点是读写成本太高。
    另一种方式是去Session化，比如Play直接将Session存到客户端的Cookie中，缺点是存储信息的大小受限。
    将Session缓存到Redis中，既保证了可伸缩性，同时又避免了前面两者的限制。

场景3：还有分布式锁

场景4：全局计数器等高级应用场景